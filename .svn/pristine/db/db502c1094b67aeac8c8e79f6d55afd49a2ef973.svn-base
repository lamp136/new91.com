<?php
namespace web\search\controller;
use think\Controller;
use think\Cache;
use think\Cookie;//cookie类
use think\Db;
use think\cache\driver\Redis;
use web\extra\controller\Base;
use web\extra\model\Store;
use common\sphinx\SphinxClient;

class Search extends controller
{
    /**
     * 搜索页面
     * @return void
     */
    public function search(){
        $base = new Base;
        $input = input();
        $province = decode(Cookie::get('ip_region_id'));
        $dataCount = 0;
        $currPage = !empty($input['page']) ? $input['page'] : 1;
        $category = $input['cat'];
        $where['category_id'] = $category;
        $where['status'] = config('normal_status');
        $selectName = '';
        if(!empty($input['name'])){
            $selectName = $input['name'];
            $resultdata = $this->searchName($input['name'],$input['cat']);
            $where['id'] = ['in',$resultdata];
        }
        $selectCity = 0;
        if(!empty($input['city']) && $input['city'] != 0){
            $selectCity = $input['city'];
            $where['city_id'] = $selectCity;
        }
        $selectPrice = '';
        if(!empty($input['price']) && in_array($input['price'],config('price_range'))){
            $selectPrice = $input['price'];
            $priceRange = config('price_range');
            $where['min_price'] = $this->betweenWhere($selectPrice,$priceRange);
        }
        $selectDist = '';
        if(!empty($input['dist']) && in_array($input['dist'],config('store_length'))){
            $selectDist = $input['dist'];
            $storeLength = config('store_length');
            $where['distance'] = $this->betweenWhere($selectDist,$storeLength);
        }
        $fields = 'id,name,store_sn,province_id,image,thumb_image,address,min_price,label,actual_hits,hits,status';
        $currlist = [];
        $selectProvince = '';
        if(!empty($input['province']) && $input['province'] != 0){
            $selectProvince = $input['province'];
            $where['province_id'] = $selectProvince;
        }else{
            $where['province_id'] = $province;
            $currlist = Store::with('funcontact')->where($where)->field($fields)->order('sort DESC,member_status DESC')->select();
            $where['province_id'] = ['neq',$province];
        }
        $rankList = Db::name('store')->where(['province_id' => $province,'status' => config('normal_status'),'category_id' => config('category_cemetery_id')])->field('id,name,min_price')->order('system_score desc')->limit(6)->select();
        $city = [];
        $dataCount = Db::name('store')->where($where)->count();
        $storeList = Store::with('funcontact')->where($where)->field($fields)->order('sort DESC,member_status DESC')->paginate(config('page_size'),false,['query' => $input]);
        $storeProvince = Db::name('store')->where(['id' => ['in',$resultdata],'category_id' => $category,'status' => config('normal_status')])->distinct(true)->column('province_id');
        $allRegion = Db::name('region')->where('status',config('normal_status'))->field('id,name,pid,level,abbreviate')->select();
        $provincelist = $citylist = $pAbbr = [];
        if(!empty($allRegion)){
            foreach ($allRegion as $val) {
                if($val['level'] == config('normal_status')){
                    if(in_array($val['id'], $storeProvince)){
                        $provincelist[$val['id']] = $val['name'];
                        $pAbbr[$val['id']] = strtolower($val['abbreviate']);
                    }
                }
                if(!empty($selectProvince) && $val['pid'] == $selectProvince){
                    $citylist[$val['id']] = $val['name'];
                }
            }
        }
        $page = $storeList->render();
        $base->hmzc();
        $sense = $base->article(config('article_sense'),6);
        //seo start
        if($category == config('category_cemetery_id')){
            $seoType = config('seo_type.cemetery_list');
        }else if($category == config('category_funeral_id')){
            $seoType = config('seo_type.funeral_list');
        }
        $seo = $base->getseo($seoType);
        $seostring = $seo['seo_title'].$seo['seo_keywords'].$seo['seo_description'];
        if(!empty($selectCity) || strpos($seostring,'{region}')){
            $cityName = in_array($selectCity, $citylist) && $selectCity != 0 ? $citylist[$selectCity] : '';
            $seo['seo_title'] = str_replace('{region}',$cityName,$seo['seo_title']);
            $seo['seo_keywords'] = str_replace('{region}',$cityName,$seo['seo_keywords']);
            $seo['seo_description'] = str_replace('{region}',$cityName,$seo['seo_description']);
        }
        if(!empty($selectDist) || strpos($seostring,'{distance}')){
            $diststring = empty($selectDist) ? '' : $selectDist.'公里';
            $seo['seo_title'] = str_replace('{distance}',$diststring,$seo['seo_title']);
            $seo['seo_keywords'] = str_replace('{distance}',$diststring,$seo['seo_keywords']);
            $seo['seo_description'] = str_replace('{distance}',$diststring,$seo['seo_description']);
        }
        if(!empty($selectPrice) || strpos($seostring,'{price}')){
            $pricestring = empty($selectPrice) ? '' : $selectPrice.'万';
            $seo['seo_title'] = str_replace('{price}',$pricestring,$seo['seo_title']);
            $seo['seo_keywords'] = str_replace('{price}',$pricestring,$seo['seo_keywords']);
            $seo['seo_description'] = str_replace('{price}',$pricestring,$seo['seo_description']);
        }
        $this->assign([
            'seo'            => $seo,
            'abbr'           => $pAbbr,
            'category'       => $category,
            'rankList'       => $rankList,
            'dataCount'      => $dataCount,
            'countDist'      => count(config('store_length')),
            'countRange'     => count(config('price_range')),
            'selectPrice'    => $selectPrice,
            'selectProvince' => $selectProvince,
            'selectCity'     => $selectCity,
            'selectDist'     => $selectDist,
            'selectName'     => $selectName,
            'input'          => $input,
            'list'           => $storeList,
            'currlist'       => $currlist,
            'currPage'       => $currPage,
            'page'           => $page,
            'provincelist'   => $provincelist,
            'citylist'       => $citylist,
            'sense'          => $sense,
        ]);
        return $this->fetch();
    }

    /**
     * 获取where区间条件
     * @param  array $selectData 筛选条件
     * @param  array $conf 配置常量
     * @return array
     */
    private function betweenWhere($selectData,$conf){
        $cond = [];
        $min = current($conf);
        $max = end($conf);
        if($selectData == $min){
            $cond = ['elt',$min];
        }else if($selectData == $max){
            $cond = ['egt',$max];
        }else{
            $data = explode('-',$selectData);
            if(is_array($data)){
                $count = count($data);
                if($count > 1){
                    $cond = ['between',[(int)$data[0],(int)$data[1]]];
                }
            }
        }

        return $cond;
    }

    /**
     * 搜索提示
     * @return array;  
     */
    public function hint(){
        $data = [];
        $input = input('post.');
        $type  = $input['type'];
        $keyword  = $input['keyword'];
        $provinceid = decode(cookie::get('ip_region_id'));
        $data = array();
        $lastdata = '';
        if(!empty($keyword)){
            if(!empty($type)){
                $searchwhere['type'] = $type;
            }
            $searchwhere['keyword'] = ['like','%'.$keyword.'%'];
            // $searchwhere['province_id'] = $provinceid;
            $data = Db::name('SearchEngine')->where($searchwhere)->field('store_id,keyword')->order('member_status desc')->limit(10)->select();
        }
        echo json_encode($data);
    }
    /**
     * @param  string   $keyword   搜索词
     * @param  Int      $type      类型(eg:陵园 殡仪馆 )
     * @return array;   
     */
    public function searchName($keyword,$type){
        $provinceid = decode(cookie::get('ip_region_id'));
        $data = array();
        $lastdata = array();
        if(!empty($keyword)){
            if(!empty($type)){
                $searchwhere['type'] = $type;
            }
            $searchwhere['keyword'] =array('like','%'.$keyword.'%'); 
            // $searchwhere['province_id'] = $provinceid;
            $data = Db::name('SearchEngine')->where($searchwhere)->field('store_id')->select();
            foreach($data as $val){
                $lastdata[] = $val['store_id'];
            }
        }
        if(empty($lastdata)){
            //获取对应的商家数据
            $data = $this->_sphinxSearchd($keyword,$type,$provinceid,$city=0);
            if(!empty($data['matches'])){
                foreach($data['matches'] as $key=>$val){
                    $lastdata[] = $key;
                }
            }
        }

        return $lastdata;
    }
    
    /**
     * 实例化 sphinx 类
     * @param  String   $host    服务的地址
     * @param  Int      $port    端口号
     * @return SphinxClient
     */
    private function sphinxClient($host='', $port=9312) {
        if (empty($host)) {
            $host = config('search_server');
        }
        $sphinxClient = new SphinxClient();
        $sphinxClient->SphinxClient();
        $sphinxClient -> SetServer($host, $port);
        return $sphinxClient;
    }
    /*
     * @param   string $wd         搜索词
     * @param   int    $type       商家类型
     * @param   int    $province   省份  
     * @param   int    $city       地区 
     * @param   int    $offset     偏移量
     * @param   bool   $bool       
     * return  array;
     */
    private function _sphinxSearchd($wd, $type, $province, $city, $offset=0, $bool=true) {
        if (empty($wd) && empty($province)) {
            return array();
        }
        //获取sphinx对象
        $sphinxClient = $this->sphinxClient();
        // if($type != config('category_etiquette_id')){
        //     // 地区过滤
        //     $filterProvince = (int)$province;
        //     $sphinxClient -> SetFilter("province_id", array($filterProvince));   //省份过滤条件
        //     //如果城市存在，那么也需要进行过滤，主要用在列表页的条件过滤上
        //     if ($city && $bool) {
        //         $sphinxClient -> SetFilter("city_id", array((int)$city));   //省份过滤条件
        //     }
        // }
        if ($bool) {
            $sphinxClient -> SetLimits($offset, config('default_size'));    //匹配的偏移量
        } else {
            $sphinxClient -> SetLimits(0, 1000);    //匹配的偏移量
        }

        $sphinxClient->SetMatchMode(SPH_MATCH_ALL);//匹配所有查询词(默认模式);
        //会员状态  取反  非删除的数据
        //$sphinxClient -> SetFilter("state", array(config('delete_status')), true);
        //排序
        $sphinxClient -> setSortMode(SPH_SORT_EXTENDED, '@weight DESC');
        $sphinxClient -> SetSortMode( SPH_SORT_EXTENDED, "member_status DESC");
        //数据类型 陵园,殡仪馆还是服务
        if ($type && $type == config('category_cemetery_id')) {
            $filterCategory = array(config('category_cemetery_id'));
        } else if ($type && $type == config('category_funeral_id')) {
            $filterCategory = array(config('category_funeral_id'));
        } else if($type && $type == config('category_etiquette_id')){
            $filterCategory = array(config('category_etiquette_id'));
        }else {
            $filterCategory = array(config('category_cemetery_id'),config('category_funeral_id'),config('category_etiquette_id'));
        }
        //如果添加第三个参数， true 则是取反
        $sphinxClient->SetFilter("category_id", $filterCategory);
        $sphinxClient->SetMatchMode(SPH_MATCH_ALL);
        $sphinxResult = $sphinxClient->query($wd, "*");
        //完全匹配数据，如果数据没有那么进行模糊匹配
        if(!empty($sphinxResult['matches'])){
            $sphinxClient->SetMatchMode(SPH_MATCH_ANY);
            $sphinxResult = $sphinxClient->query($wd, "*");
        }
        return $sphinxResult;
    }

    public function searchwd(){
        $input = input('get.');
        if(!empty($input['keyWord'])){
            $data = [
                'keyword'      => $input['keyWord'],
                'province_id'  => decode(cookie('ip_region_id')),
                'category_id'  => $input['category'],
                'ip'           => request()->ip(1),
                'created_time' => time(),
            ];
            Db::name('SearchKeywords')->data($data)->insert();
        }
    }
    
    
}