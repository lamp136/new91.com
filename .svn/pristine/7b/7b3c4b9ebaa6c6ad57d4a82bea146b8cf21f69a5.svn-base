<?php
namespace back\money\controller;
use think\Controller;
use back\extra\controller\Base;
use think\Request;
use think\Db;
use think\Session;//session类
use back\extra\model\OrderGrave;

/**
 * 财务控制器
 */
class Money extends Base
{
	public function getCondition(){
        $where = array();
        $getdata = input('get.');
        if($getdata){
	        if(!empty($getdata['store_name'])){
	            $where['store_name'] = $getdata['store_name'];
	        }
	        if(!empty($getdata['mobile'])){
	            $where['mobile'] = $getdata['mobile'];
	        }
	        if(!empty($appointment_time)){
	            $where['appoint_time'] = strtotime($appointment_time);
	        }
	        //商务跟踪权限判断
	        $tmp = session('businessPrivilege');

	        if(!empty($tmp)){
	            $where['order_flow_id'] = session('admin_id');
	        }
        	return $where;
        }
    }


	 /**
     * 列表页共同方法
     * @param  $where 条件
     * @param  $get   input('get.');分页用
     * @param  $time  按什么时间排序
     * @param  return array();
     * 
     */
    public function comlist($where,$get,$time){
        $order = db::name('OrderGrave');
        $pageSize = Config('page_size');
        $data = $order->where($where)->order(''.$time.' desc')->paginate($pageSize,false,['query' => $get]);
        return $data;
    }

	/**
	 * 财务退单列表
	 */
	public function backmoneylist(){
		$get = input('get.');
        $time = 'back_apply_time';
        $arr = array(config('order_status.back_success'),config('order_status.allow'));
        $where['status'] = array('in',$arr); 
        $data = $this->comlist($where,$get,$time);
        $page = $data->render();
        $status = config('order_status_change');
        $this->assign('data',$data);
        $this->assign('page',$page);
        $this->assign('status',$status);
        return $this->fetch('backmoneylist');
	}

    /**
     * 陵园支付列表
     */
    public function storepaylist(){
        $get = input('get.');
        $where['status'] = config('order_status.check_success');//3
        $where['state'] = array('gt',-1);

        //已发送财务
        $where['send_finance_status'] = config('send_to_finance.success');
        $time = 'send_finance_time';

        $member = Db::name('admin')->where('status',config('normal_status'))->column('id,name');
      
        $data = $this->comlist($where,$get,$time);
        $page = $data->render();
        
        $this->assign('member',$member);
        $this->assign('data',$data);
        $this->assign('page',$page);
        return $this->fetch('storepaylist');
    }

    /**
     * 查看跟踪信息
     */
    public function checkmessage(){
        $id= input('id');
        $arr = array('flag'=>1,'data'=>'');
        $revisit = Db::name('order_revisit')->where('order_id',$id)->order('created_time desc')->select();

        foreach ($revisit as $key => $value) {
            $revisit[$key]['created_time'] = date('Y-m-d H:i:s',$value['created_time']);
        }
        if($revisit){
            $arr = array('flag'=>1,'data'=>$revisit );
        }

        echo json_encode($arr);
    }

    /**
     * 添加回访跟踪信息
     */
    public function addmessage(){
        $data = input('post.');
        $info = $data['info'];
        $admin_id = Session::get('admin_id');
        $info['admin_id'] = $admin_id;
        $admin_name = Db::name('admin')->where('id',$admin_id)->field('name')->find();
        $info['admin_name'] = $admin_name['name'];
        $info['created_time'] = time();
        
        $res = Db::name('order_revisit')->insert($info);
        if($res){
            $result = array('flag'=>1,'msg'=>'添加成功');
        }else{
            $result = array('flag'=>0,'msg'=>'添加失败');
        }

        echo json_encode($result);
    }

    /**
     * 佣金支付成功
     */
    public function payforsuccess(){
        $data = input('post.');
        $info = $data['info'];

        $array = array('flag'=>0,'msg'=>'操作失败');
        $order = Db::name('order_grave')->where('id='.$data['order_id'])->find();

        $info['store_pay_admin_id'] = session('admin_id'); //确认陵园支付的人的ID

        if(($order['apply_return_status']) == config('apply_return_status.default_status')) { 
            //不需要返现
            unset($info['paid_in_amount']);

            $info['status'] = config('order_status.success');//订单状态--已完成
            $info['success_time'] = time();
            $res = Db::name('order_grave')->where('id',$data['order_id'])->update($info);
   
        }else{  //需要返现 
            $info['updated_time'] = time();
            $info['payfor_us_time'] = strtotime($info['payfor_us_time']); 
            $info['status'] = config('order_status.get_money'); //佣金状态--> 已支付
            $info['apply_return_status']  = config('apply_return_status.ok_check_return_status');//审核完成

            $res = Db::name('order_grave')->where('id',$data['order_id'])->update($info);   
        }

        //上传票据
        if($_FILES['image']['error'] == 0 && !empty($_FILES['image']['tmp_name'])){

            $imagesRet = uploadOne('image',Config('order_bill'),array(array(225,220,6)));
            if($imagesRet['ok'] == 0){
                $this->error($imagesRet['error']);
            }else{
                $billData['bill_image'] = $imagesRet['images'][0];
                $billData['bill_thumb_image'] = $imagesRet['images'][1];
                $billData['type'] = $data['type'];
                $billData['order_grave_id'] = $order['id'];
                $billData['order_grave_sn'] = $order['order_grave_sn'];
                $billData['bill_status'] = 22;
                $billData['updated_time'] = time();
                $billData['created_time'] = time();
            }
            $result = Db::name('order_grave_bill')->insert($billData);
        }

        if($res){
            $array = array('flag'=>1,'msg'=>'操作成功');
        }

        echo json_encode($array);

    }

    /**
     * 客户返现列表
     */
    public function returnpesentlist(){
        $get = input('get.');
         //客户购墓完成
        $sendarr = array(config('send_to_finance.success'),config('send_to_finance.success_finance'));
        //佣金收到
        $where['status'] = config('order_status.get_money');
        $where['state'] = array('gt',-1);

        //推送财务状态--已发送
        $tuisong = array(config('apply_return_status.need_return_status'),config('apply_return_status.ok_check_return_status'));
        $where['send_finance_status'] = array('in',$sendarr);//已发送至财务
        $where['apply_return_status'] = array('in',$tuisong);//客户返现状态--审核完成或者申请返现
        $member = Db::name('admin')->where('status',config('normal_status'))->column('id,name');
        $time = 'payfor_us_time';
        $data = $this->comlist($where,$get,$time);
        $page = $data->render();
        
        $this->assign('member',$member);
        $this->assign('data',$data);
        $this->assign('page',$page);
        return $this->fetch('returnpesentlist');
    }

    /**
     * 查询返现客户信息
     */
    public function returnpesentmsg(){
        $id = input('id');
        if($id){
            $msg = Db::name('order_grave')->where('id',$id)->field('id,buyer,mobile,bank_name,bank_member_name,bank_id,return_money,reservation_person,reservation_phone,paid_in_amount')->find();
            if($msg){
                $array = array('flag'=>1,'data'=>$msg);
            }else{
                $array = array('flag'=>0,'data'=>'暂无数据');
            }
            echo json_encode($array);
        }
    }

    /**
     * 返现完成提交修改
     */
    public function returnpesentsave(){
        $data = input('post.');
        $array = array('flag'=>1,'msg'=>'操作失败');
        $order = Db::name('order_grave')->where('id='.$data['id'])->find();
     
        if($_FILES['image']['error'] == 0 && !empty($_FILES['image']['tmp_name'])){

            $imagesRet = uploadOne('image',Config('order_bill'),array(array(225,220,6)));
            if($imagesRet['ok'] == 0){
                $this->error($imagesRet['error']);
            }else{
                $billData['bill_image'] = $imagesRet['images'][0];
                $billData['bill_thumb_image'] = $imagesRet['images'][1];
                $billData['type'] = $data['type'];
                $billData['order_grave_id'] = $order['id'];
                $billData['order_grave_sn'] = $order['order_grave_sn'];
                $billData['bill_status'] = 22;
                $billData['updated_time'] = time();
                $billData['created_time'] = time();
            }
            $result = Db::name('order_grave_bill')->insert($billData);
        }

        $data['return_pay_admin_id'] = session('admin_id'); //确认返现的人的ID
        $data['status'] = config('order_status.success');//返现完成--订单完成
        $data['success_time'] = time();
        $data['apply_return_status'] = config('apply_return_status.ok_check_return_status');//返现状态--完成
        $data['payfor_customer_time'] = time();//返现给客户的时间
        
        unset($data['type']);
        $res = Db::name('order_grave')->update($data);
        if($res){
            $array = array('flag'=>1,'msg'=>'操作成功');
        }

        echo json_encode($array); 
    }


    /*******************财务退单列表功能开始****************/
    /**
     * 点击确认支付弹出模态框
     */
     public function paymoney(){
            $id = input('id');
            $data = db('OrderGrave')->where('id='.$id)->field('id,brokerage_percent,brokerage_money,paid_in_amount,return_fact_money,back_money')->find();
            $result['data'] = $data;
            $result['flag'] = 1; 
            echo json_encode($result);
     }
     /**
      * 提交支付数据和票据
      */
     public function paydata(){
        $data = input('post.');
        if($data){
            //开启事务
            Db::startTrans();
            //上传票据图片
            if ($_FILES['image']['error'] == 0 && !empty($_FILES['image']['tmp_name'])) {
                $ret = uploadOne('image', config('order_bill'));
                if ($ret['ok'] == 0) {
                    $this->error = $ret['error'];
                    $result = array('flag'=>0,'msg'=>'操作(票据上传)失败！');
                    echo json_encode($result);die;
                }else{
                    $info['bill_image'] = config('img_host') . $ret['images'][0];
                    $info['order_grave_id'] = $data['id'];
                    $info['type'] = config('bill_type.back');
                    $info['created_time'] = time();
                    $billRes = Db::name('OrderGraveBill')->insert($info);
                    if(!$billRes){
                        $result = array('flag'=>0,'msg'=>'图片信息写入失败！');
                        echo json_encode($result); die;
                    }
                }
            }
            $datas['back_fact_money'] = $data['back_fact_money'];
            $datas['status'] = config('order_status.back_success');
            $datas['updated_time'] = time();
            $datas['back_money_time'] = date('y-m-d h:i:s',time());
            $ending = Db::name('order_grave')->where('id='.$data['id'])->update($datas);
            if($ending){
                Db::commit();
                $result = array('flag' => 1, 'msg' => '操作成功！');
                echo json_encode($result);
            }else {
                Db::rollback();
            } 
        }
    }


    /*******************财务退单列表功能结束****************/

    /**
     * 财务完成订单
     * @return [type] [description]
     */
    public function finish(){
        $get = input('get.');
        $arr = [
            config('order_status.success'),
            config('order_status.stop')
        ];
        if(!empty($get['store_name'])){
            $where['store_name'] = ['like','%'.$get['store_name'].'%'];
        }
        if(!empty($get['mobile'])){
            $where['reservation_phone|mobile'] = ['like','%'.$get['mobile'].'%'];
        }
        $where['store_status'] = ['gt',0];
        $where['status'] = ['in',$arr]; //订单状态  --已完成
        $where['state'] = ['gt',-1];
        $time = 'payfor_us_time';
        $list = $this->comlist($where,$get,$time);
        $page = $list->render();
        $this->assign('order_flow',$this->getBusinessMen(false,false));
        $this->assign('list',$list);
        $this->assign('page',$page);
        return $this->fetch();
    }

    /**
     * 订单详情
     */
    public function finishdetail(){
        $orderId = input('orderId');
        $items = input('items');
        $title = Db::name('OrderGrave')->where('id='.$orderId)->find();
        if(!empty($orderId)){
            switch($items){
                case 'orderDetail'://订单信息
                    $this->orderDetail($orderId);
                break;
                case 'messages'://短信
                    $this->messages($orderId);
                break;
            }
        }else{
            $this->error('操作失败！');
        }
        $this->assign('business',$this->getBusinessMen());
        $this->assign('title',$title);
        $this->assign('orderId',$orderId);
        $this->assign('items',$items);
        return $this->fetch('finishdetail', ['id'=>$orderId]);
    }

    //订单信息
    private function orderDetail($id){
        $order = Db::name('OrderGrave');
        $where['id'] = $id;
        //关联墓位信息  车辆信息 工作人员信息
        $data = OrderGrave::with(['findviewtomb'])->where($where)->order('created_time desc')->select();
            //查询省、市名称开始
        $list = $order->where($where)->find();
        $provinceid = $list['province_id'];
        $cityid = $list['city_id']; 
        $zone = $this->findzone($provinceid,$cityid);
        //查询省、市名称结束
        //获取商务人员id
        $this->assign('order_flow',$this->getBusinessMen(false,false));
        //来电类型
        $call_arr = config('call_type');
        //墓位使用人状态
        $tomb_user_status = config('tomb_user_status');
        //订单来源
        $order_type = config('order_type');
        //意向程度
        $purpose = config('view_tomb_intention');
        //订单状态转换
        $order_status_change = config('order_status_change');
        //性别
        $sex = config('tomb_sex');
        //车辆
        $view_tomb_vehicle = config('view_tomb_vehicle');
        $this->assign('tomb_user_status',$tomb_user_status);
        $this->assign('sex',$sex);
        $this->assign('purpose',$purpose);
        $this->assign('order_status_change',$order_status_change);
        $this->assign('order_type',$order_type);
        $this->assign('view_tomb_vehicle',$view_tomb_vehicle);
        $this->assign('call_arr',$call_arr);
        $this->assign('zone',$zone);
        $this->assign('data',$data);
    }

    //短信
    private function messages($id){
        $msg = Db::name('OrderGraveMsg')->where('order_id='.$id)->select();
        $this->assign('msg',$msg);            
    }

    /**
     * 通过province_id和city_id查询省市名称
     * @param  传入  $provinceid , $cityid
     * @param  return 省/市名称
     */
    public function findzone($provinceid,$cityid){
        $data['province'] = db('region')->where('id='.$provinceid)->field('name')->find();
        $data['city'] = db('region')->where('id='.$cityid)->field('name')->find();
        return $data;
    }
}